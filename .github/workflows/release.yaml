name: Test & Release

on:
  push:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.2.0
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true
      - name: Lint
        run: make lint
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.x", "3.10-dev"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.2.0
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true
      - name: Test
        run: make test
      - name: Export Coverage Report
        run: pip install "coverage[toml]" && coverage xml
      - name: Upload code coverage
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          name: di
          env_vars: OS,PYTHON
          fail_ci_if_error: true
  docs:
    name: ðŸš€ Deploy Docs ðŸ“„
    runs-on: ubuntu-latest
    needs: ["test", "lint"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all commits/branches
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.2.0
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true
      - name: Deploy docs
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          make docs-deploy
  pypi:
    name: ðŸš€ PyPi Release ðŸ“¦
    runs-on: ubuntu-latest
    needs: ["test", "lint"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.2.0
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true
      - name: Release on PyPi
        run: |
          make version-sync
          poetry config pypi-token.pypi "${{ secrets.PYPI_TOKEN }}"
          poetry publish --build
